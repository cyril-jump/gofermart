// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/cyril-jump/gofermart/internal/dto"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/user/balance)
	GetUserBalance(ctx echo.Context) error

	// (POST /api/user/balance/withdraw)
	PostUserBalanceWithdraw(ctx echo.Context) error

	// (POST /api/user/login)
	PostUserLogin(ctx echo.Context) error

	// (GET /api/user/orders)
	GetUserOrders(ctx echo.Context) error

	// (POST /api/user/orders)
	PostUserOrders(ctx echo.Context) error
	// User registration
	// (POST /api/user/register)
	PostUserRegister(ctx echo.Context) error

	// (GET /api/user/withdrawals)
	GetUserBalanceWithdrawals(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetUserBalance converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserBalance(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserBalance(ctx)
	return err
}

// PostUserBalanceWithdraw converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserBalanceWithdraw(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUserBalanceWithdraw(ctx)
	return err
}

// PostUserLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUserLogin(ctx)
	return err
}

// GetUserOrders converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserOrders(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserOrders(ctx)
	return err
}

// PostUserOrders converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserOrders(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUserOrders(ctx)
	return err
}

// PostUserRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUserRegister(ctx)
	return err
}

// GetUserBalanceWithdrawals converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserBalanceWithdrawals(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserBalanceWithdrawals(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/user/balance", wrapper.GetUserBalance)
	router.POST(baseURL+"/api/user/balance/withdraw", wrapper.PostUserBalanceWithdraw)
	router.POST(baseURL+"/api/user/login", wrapper.PostUserLogin)
	router.GET(baseURL+"/api/user/orders", wrapper.GetUserOrders)
	router.POST(baseURL+"/api/user/orders", wrapper.PostUserOrders)
	router.POST(baseURL+"/api/user/register", wrapper.PostUserRegister)
	router.GET(baseURL+"/api/user/withdrawals", wrapper.GetUserBalanceWithdrawals)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RX32/bNhD+VwhuwF7cyHG7h/ppaR7aYEVSLBv2EATDWTpJTCWSOx7jeYX/94GUZEuO",
	"DOc3ujeZPt7dx++7O/KbTE1tjUbNTs6/SZeWWEP8/AAV6BT/VFxmBMuwZMlYJFYYDQxlSOGDVxblXDom",
	"pQu5nkjn67CeG6qB5VzmlQGWk85Q+3qBJNfriST82yvCTM6vWn/N7uuNsVncYMrB6zku/3BNxGEilSmU",
	"Hk3EgnNLQ9nInzvBGx+9HWMZXIQMj+8mAGlKHqr7YJ50X6PnxsDejf7lbWUgw+yv4PwQmDbEZJPYxvXQ",
	"0RjGcMQt9SNIU0+Emu+HdNlKRz9CDF2gvpexdDt5QuWOHyJRSyZF5/Yd6HNoeCfI3exDFEw9KV5dhrpr",
	"j9iYrwpPPJfhVxB2uyQnUkMdHLD5inqbC1j1K67kOjhUOjeNF82QRmhYg6qClxWp6sbb+pcirBylpt66",
	"PA1/ipMCcqPNbTiADF1KyrIyIYUT4aC2FYqTL2eCS2DhHToBojA5Ug3EQmnBJYoLizoYvT2aCmcxVblK",
	"IXqZyEqlqB2GrNq4nwxpJ0Bn4pMxt+jEqakt6JWYHU1DFqy4CnaXSygKJPGxCycn8hbJNdkdH00bc2NR",
	"g1VyLt/GpVDQXMZzTcCqxDukZNHIOywWGI9oiPUjMitdRDRhw09OtHIU3dYYiSKss6zZ0iscGUThrNGu",
	"oXQ2nXactMUD1lbtsSQ3zuht7w1fPxLmci5/SLbNOWk7czKoz0j5MPlLnwbN5b4SrfwCFJNHNEGq6GLh",
	"vJse30X+e4tYKCe0YQGeS0PqX8zClp8bGMMtZ5qRNFTCId0iCSQyNNC2nF8NVX11vb4OBncYSZb9YWPc",
	"CDfbet+A2eXii3F9MjYDrKlUdPzBZKtn42M3ynrYEpg8rsfl8Gq8vZvORrcQCiCMG1AbX5Qi9zpzwjSF",
	"DGlqvG6CzmZjzN9CpTIRe57Ytv2Xk8lm0I9rI5AeoaPmbc8ZF8fndt6/hCS6i8pjpdBn021kUa362DCT",
	"E1kiZEjR0SXym9NmTAzy3L0orKMepvvZbA9EtINvn+I680hJ0t2ahAX1cA0MSY5ycgebM4hKOQ4F0txn",
	"BjJ0+xr0ReP8if1ZMdbukAray+J6O6aJYPWUlj2bvrt7HudGdFhEBgzfQ2+f7CnQzwZ22sW+8uzxtK8+",
	"Gf/hxFag9AHFP7oG+5mKEpyAihCylVggatFdpMViJbhULh5uQ9NIszzH5dAfpClaxiwUWo92+Uz1GXth",
	"R/O2Z0Tz90+FC9pwibRBfO/x0Mv65aYEYaEctw/FVofjKvuts/yfzYEOIWbx5jxC8QMF9H6sVgulQ+RO",
	"BSZNvVWP6xa+roFWnSyb9Bs+5JC75fY5d3AChKdOgKCMFrAwnmO/3HoIHTReaA7c1ntPyFcZDIMn6yuM",
	"hyUpxjcmz913ce+PFmGLiwaewtu0ZLbzJNk8Jo+UCaKQ6+v1fwEAAP///1dq5aMSAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
